#!/bin/bash
# tffss - Test for fake storage size.

tffssHome=~/.config/tffss
testDir="$tffssHome/tests"
tab="$(echo -e '\t')"

function private_assertConfig
{
    mkdir -p "$testDir"
}

function listTests # List the configured tests.
{
    private_listTests | column -t -s"$tab"
}

function private_listTests
{
    private_showListHeadings
    for test in $(private_getTests); do
        private_showTestListing "$test"
    done
}

function private_getTests
{
    ls -1 "$testDir"
}

function private_showListHeadings
{
    echo -e "Test name${tab}Device to test${tab}Source material${tab}Has sums"
}

function private_showTestListing
{
    testName="$1"
    . "$testDir/$testName"
    
    sourceSize="$(du -sh $pathToSourceMaterial | awk '{print $1}')"
    hasSums="no"
    
    deviceSize="$(df -h $pathToDeviceToTest | tail -n1 | awk '{print $2}')"
    deviceUsed="$(df -h $pathToDeviceToTest | tail -n1 | awk '{print $3}')"
    
    if [ -e "$pathToSourceMaterial/sums" ]; then
        hasSums="yes"
    fi
    
    echo -e "$testName${tab}$pathToDeviceToTest ($deviceUsed/$deviceSize)${tab}$pathToSourceMaterial ($sourceSize)${tab}$hasSums"
}


function createTest # Create a test to be run. Syntax: --createTest testName pathToDeviceToTest pathToSourceMaterial
{
    if [ "$3" == "" ]; then
        echo "Not enough parameters. Check the syntax." >&2
        echo
        help >&2
        exit 1
    fi
    
    testName="$1"
    pathToDeviceToTest="$2"
    pathToSourceMaterial="$3"
    configFile="$testDir/$testName"
    
    echo "Creating test \"$configFile\""
    
    #echo "testName=\"$testName\"" > "$configFile"
    echo "pathToDeviceToTest=\"$pathToDeviceToTest\"" >> "$configFile"
    echo "pathToSourceMaterial=\"$pathToSourceMaterial\"" >> "$configFile"
}

function runTest # Run a specified test. Syntax: --runTest testName
{
    if [ "$1" == "" ]; then
        echo "Not enough parameters. Check the syntax." >&2
        echo
        help >&2
        exit 1
    fi
    
    testName="$1"
    configFile="$testDir/$testName"
    
    . "$testDir/$testName"
    
    now="$(private_now)"
    testDir="$pathToDeviceToTest/tffss/$now"
    
    # Make sure that we have the source sums to compare to.
    private_createSums "$pathToSourceMaterial"
    
    # Create the structure.
    mkdir -p "$testDir/"{log,data}
    cd "$testDir"
    localLog="log/run.log"
    touch "$localLog" result
    echo "not complete" > result
    private_log "$localLog" "Prep test $now."
    df -h "$pathToDeviceToTest" | private_logPipe "$localLog"
    
    # Copy test data to the destination.
    private_log "$localLog" "Copy data."
    rsync -ruv --progress "$pathToSourceMaterial" "$testDir/data"
    
    # Determine checksums.
    private_log "$localLog" "Determine checksums."
    sumsAfterCopy="$(private_now)"
    private_createSums "$testDir/data" "sums.$sumsAfterCopy"
    
    # Test
    private_log "$localLog" "Perform test."
    private_testSums "$testDir" "sums.$sumsAfterCopy"
    result=""
    
    return $result
}

function private_testSums
{
    testDir="$1"
    sumsFile="$2"
    resultFile="$testDir/result"
    cd "$testDir/data"
    
    if diff sums "$sumsFile"; then
        echo "fail" | tee "$resultFile"
        return 1
    else
        echo "pass" | tee "$resultFile"
        return 0
    fi
}

function private_log
{
    logFile="$1"
    logLine="$2"
    now="$(private_now)"
    
    echo "$now: $logLine" | tee -a "$logFile"
}

function private_logPipe
{
    logFile="$1"
    now="$(private_now)"
    
    while read logLine; do
         echo "$now: $logLine" | tee -a "$logFile"
    done
}

function private_now
{
    date +%Y-%m-%d--%H%M%S
}

function private_createSums
{
    cd "$1"
    if [ "$2" == '' ]; then
        sumsFileName="sums"
    else
        sumsFileName="$2"
    fi
    
    if [ ! -e "$sumsFileName" ]; then
        echo "Creating checksums in $1..."
        md5sum * | grep -v 'sums' | awk '{print $2, $1}' | sort > "$sumsFileName"
    fi
}


function deleteTest # Delete an existing test. Syntax: --deleteTest testName
{
    testName="$1"
    configFile="$testDir/$testName"
    
    if [ ! -e "$configFile" ]; then
        echo "Test $configFile does not exist." >&2
        exit 1
    fi
    
    rm "$configFile"
}


function help # Show this help.
{
  echo "Valid commands are"
  echo
  grep "^function" "$0" | grep -v '\(private_\)' | sed 's/^function *//g; s/ # /\^/g; s/^/--/g' | column -t -s '^'
}

##### Stuff for handling parameters.
function private_showCommands
{
  grep "^function" "$0" | awk '{ print $2 }' | grep -v '\(private_\)'
}

function private_isValidCommand
{
  private_showCommands | grep -q "^$1$"
  return "$?"
}

function private_getCommandFromArg
{
  if [ "${1::2}" == '--' ]; then
    command="${1:2}"
    if private_isValidCommand "$command"; then
      echo "$command"
    else
      return 1
    fi
  else
    return 1
  fi
}

##### Get started.

private_assertConfig


if [ "$1" == '' ]; then
  help
else
  if command="$(private_getCommandFromArg "$1")"; then
    shift
    "$command" "$@"
    returnValue="$?"
   exit "$returnValue"
  else
    echo "$0: Command not found." >&2
    exit 1
  fi
fi



